scalar Date

type Query {
  categories: [Category]
  expenses(filter: ExpenseFilter, pagination: PaginationInput, sort: SortInput): [Expense]
}

type Mutation {
  createExpense(input: ExpenseInput!): Expense
}

type Category {
  id: Int!
  name: String!
  type: CategoryType!
}

enum CategoryType {
  Essential
  Discretionary
}

type Expense {
  id: Int!
  userName: String!
  description: String!
  image: String
  category: Category!
  amount: ExpenseAmount!
  transaction: Transaction!
}

type ExpenseAmount {
  value: Float!
  currency: Currency!
}

type Currency {
  code: String!
  symbol: String!
}

type Transaction {
  date: Date!
  paymentMethod: PaymentMethod!
}

type PaymentMethod {
  type: PaymentMethodType!
  details: PaymentDetails
}

enum PaymentMethodType {
  Card
  Cash
  BankTransfer
}

type PaymentDetails {
  cardType: String
  lastFourDigits: String
  accountNumber: String
}

input ExpenseFilter {
  userName: StringFilter
  amount: FloatFilter
}

input StringFilter {
  eq: String
  contains: String
  neq: String
  notContains: String
}

input FloatFilter {
  eq: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
}

input PaginationInput {
  page: Int!
  pageSize: Int!
}

input SortInput {
  field: String!
  order: SortOrder!
}

enum SortOrder {
  ASC
  DESC
}

input ExpenseInput {
  userName: String!
  description: String!
  image: String
  categoryId: Int!
  amount: Float!
  currencyCode: String!
  transactionDate: Date!
  paymentMethodType: PaymentMethodType!
  cardType: String
  lastFourDigits: String
  accountNumber: String
}